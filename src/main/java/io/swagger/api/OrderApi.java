/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreatedResponse;
import io.swagger.model.CustomerOrderDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-02-22T07:43:34.844Z")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "Add a menuItemOption to the order.", nickname = "addMenuItemOptionToOrder", notes = "Add a menu item option, taken from the Order's menu item, to the specified open order. ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Completed"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/order/addMenuItemOption/{order_id}/{menu_option_id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addMenuItemOptionToOrder(@ApiParam(value = "The id of the customer order", required = true) @PathVariable("order_id") String orderId, @ApiParam(value = "The id of Menu Item Option to add", required = true) @PathVariable("menu_option_id") String menuOptionId);


    @ApiOperation(value = "Place an order", nickname = "addOrder", notes = "Place an order for a MenuItem, with a list of MenuItemOptions. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order Placed", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CreatedResponse> addOrder(@ApiParam(value = "The contents of the order", required = true) @Valid @RequestBody CustomerOrderDto order);


    @ApiOperation(value = "Mark an order completed", nickname = "completeOrder", notes = "Mark an order complete. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Completed", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order/complete/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreatedResponse> completeOrder(@ApiParam(value = "The id of the completed order", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "delete an order", nickname = "deleteOrder", notes = "Update an order for a MenuItem, with a list of MenuItemOptions. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Deleted", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<CreatedResponse> deleteOrder(@ApiParam(value = "The id of the order to delete. Note that this does not mark it complete. Completed orders should not be deleted, but should be marked complete at /order/complete/.", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "search for an order by completed status and order date, over a date range", nickname = "searchByComplete", notes = "Retrieve an order by its completed status, with a date range. Returns an array of items ", response = CustomerOrderDto.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results found", response = CustomerOrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = CreatedResponse.class),
        @ApiResponse(code = 404, message = "Not found", response = CreatedResponse.class) })
    @RequestMapping(value = "/order/search",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CustomerOrderDto>> searchByComplete(@NotNull @ApiParam(value = "Start of the date range for the order date to search for, inclusive, or the current date if left blank. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm for a specific time ", required = true) @Valid @RequestParam(value = "startingDate", required = true) String startingDate, @ApiParam(value = "If true, search for compete orders. If false, search for incomplete orders. If missing, returns both incomplete and complete in the date range.") @Valid @RequestParam(value = "complete", required = false) Boolean complete, @ApiParam(value = "End of the date range for the order date to search for, inclusive. If left blank, the current date is used. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm for a specific time ") @Valid @RequestParam(value = "endingDate", required = false) String endingDate);


    @ApiOperation(value = "search for an order by id", nickname = "searchForOrder", notes = "Retrieve an order by its ID. ", response = CustomerOrderDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results found", response = CustomerOrderDto.class),
        @ApiResponse(code = 400, message = "bad request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/order/{id}",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerOrderDto> searchForOrder(@ApiParam(value = "id of the order to search for", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "Update an order", nickname = "updateOrder", notes = "Update an order for a MenuItem, with a list of MenuItemOptions. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Updated", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreatedResponse> updateOrder(@ApiParam(value = "The contents of the order", required = true) @Valid @RequestBody CustomerOrderDto order);

}
