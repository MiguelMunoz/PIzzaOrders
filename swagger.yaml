swagger: '2.0'
info:
  description: System to keep track of customer orders
  version: 1.0.0
  title: Customer Orders API
  contact:
    email: SwingGuy1024@yahoo.com 
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /menuItem:
    put:
      summary: Add a MenuItem, with optional MenuItemOptions.
      description: |
        Add a MenuItem, complete with MenuItemOptions, to the database. Since MenuItemOptions are always linked to specific MenuItems, they are created, updated, and removed from the MenuItem API
      operationId: addMenuItem
      parameters: 
      - in: body
        name: menuItem
        description: Complete menu item, with MenuItemOptions
        required: true
        schema:
          $ref: '#/definitions/MenuItemDto'
      consumes:
      - application/json
      produces: 
      - application/json
      responses:
        201:
          description: Menu Item Created
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /menuItem/{id}:
    get:
      summary: Gets a menuItem by ID
      operationId: getMenuItem
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: id of menuItem to find
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Found
          schema:
            $ref: '#/definitions/MenuItemDto'
        404:
          description: NotFound
  /menuItem/addOption/{menuItemId}:
    post:
      summary: Add a menuItemOption
      description: | 
        Add a MenuItemOption to a MenuItem
      operationId: addMenuItemOption
      parameters:
      - in: path
        name: menuItemId
        required: true
        description: ID of the MenuItem getting the new option
        type: string
      - in: body
        required: true
        name: option
        description: MenuItemOption
        schema:
          $ref: '#/definitions/MenuItemOptionDto'
      produces: 
      - application/json
      responses:
        201:
          description: MenuItemOption added
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /menuItem/deleteOption/{optionId}:
    delete:
      summary: Delete a MenuItemOption
      description: Delete a MenuItemOption from a MenuItem.
      operationId: deleteOption
      parameters:
      - in: path
        name: optionId
        required: true
        description: ID of the MenuItemOpton to delete
        type: string
      produces: 
      - application/json
      responses:
        200:
          description: MenuItemOption deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /order:
    put:
      summary: Place an order
      description: |
        Place an order for a MenuItem, with a list of MenuItemOptions.
      operationId: addOrder
      consumes:
      - application/json
      produces: 
      - application/json
      parameters:
      - in: body
        name: order
        description: The contents of the order
        schema:
          $ref: '#/definitions/CustomerOrderDto'
        required: true
      responses:
        201:
          description: Order Placed
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
    post:
      summary: Update an order
      description: |
        Update an order for a MenuItem, with a list of MenuItemOptions.
      operationId: updateOrder
      consumes:
      - application/json
      produces: 
      - application/json
      parameters:
      - in: body
        name: order
        description: The contents of the order
        required: true
        schema:
          $ref: '#/definitions/CustomerOrderDto'
      responses:
        202:
          description: Order Updated
          schema:
            $ref: '#/definitions/CreatedResponse'
          
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /order/complete/{id}:
    post:
      summary: Mark an order completed
      description: |
        Mark an order complete.
      operationId: completeOrder
      parameters:
      - in: path
        name: id
        description: The id of the completed order
        required: true
        type: string
      produces: 
      - application/json
      responses:
        202:
          description: Order Completed
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /order/{id}:
    get:
      summary: search for an order by id
      description: |
        Retrieve an order by its ID.
      operationId: searchForOrder
      produces:
      - applicaton/json
      parameters:
      - in: path
        name: id
        description: id of the order to search for
        required: true
        type: string
      responses:
        200:
          description: search results found
          schema:
            $ref: '#/definitions/CustomerOrderDto'
        404:
          description: Not found
        400:
          description: bad request
    delete:
      summary: delete an order
      description: |
        Update an order for a MenuItem, with a list of MenuItemOptions.
      operationId: deleteOrder
      parameters:
      - in: path
        name: id
        description: The id of the order to delete. Note that this does not mark it complete. Completed orders should not be deleted, but should be marked complete at /order/complete/.
        required: true
        type: string
      produces: 
      - application/json
      responses:
        202:
          description: Order Deleted
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/CreatedResponse'
  /order/addMenuItemOption/{order_id}/{menu_option_id}:
    post:
      summary: Add a menuItemOption to the order.
      description: |
        Add a menu item option, taken from the Order's menu item, to the specified open order.
      operationId: addMenuItemOptionToOrder
      parameters:
      - in: path
        name: order_id
        description: The id of the customer order
        required: true
        type: string
      - in: path
        name: menu_option_id
        description: The id of Menu Item Option to add
        required: true
        type: string
      produces: 
      - application/json
      responses:
        202:
          description: Order Completed
        400:
          description: Bad Request
  /order/search:
    get:
      summary: search for an order by completed status and order date, over a date range
      description: |
        Retrieve an order by its completed status, with a date range. Returns an array of items
      operationId: searchByComplete
      produces:
      - applicaton/json
      parameters:
      - in: query
        name: complete
        type: boolean
        required: false
        description: If true, search for compete orders. If false, search for incomplete orders. If missing, returns both incomplete and complete in the date range.
      - in: query
        name: startingDate
        description: |
          Start of the date range for the order date to search for, inclusive, or the current date if left blank. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm for a specific time
        required: true
        type: string
      - in: query
        name: endingDate
        description: |
          End of the date range for the order date to search for, inclusive. If left blank, the current date is used. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm for a specific time
        type: string
        required: false
      responses:
        200:
          description: search results found
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerOrderDto'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/CreatedResponse'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/CreatedResponse'
definitions:
  MenuItemOptionDto:
    type: object
    description: Option for a MenuItem
    properties:
      name:
        type: string
      menuItem:
        type: object
        $ref: '#/definitions/MenuItemDto'
      deltaPrice:
        type: string
        description: Floating point price. Strings are easier to work with.
      id:
        type: integer
        format: int32
  MenuItemDto:
    type: object
    properties:
      name:
        type: string
      itemPrice:
        type: string
        description: Floating point price. Strings are easier to work with.
      allowedOptions:
        type: array
        items:
          $ref: '#/definitions/MenuItemOptionDto'
      id:
        type: integer
        format: int32
  CustomerOrderDto:
    properties:
      menuItem:
        type: object
        $ref: '#/definitions/MenuItemDto'
      options:
        type: array
        items:
          $ref: '#/definitions/MenuItemOptionDto'
      complete:
        type: boolean
        description: Order complete
      id:
        type: integer
        format: int32
      orderTime:
        type: string
        format: date-time
      completeTime:
        type: string
        format: date-time
  CreatedResponse:
    properties:
      id:
        type: string
        format: int32
      httpStatus:
        # Note on numbers:
        #   string  int32 gives String
        #   integer int32 gives Integer
        #   number  int32 gives BigDecimal
        # I don't know how to get BigInteger.
        type: integer
        format: int32
      message:
        type: string
      body:
        description: Json description of result.
        type: string
    required:
      - code
      - message
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
schemes:
 - https
 - http
# Added by API Auto Mocking Plugin
basePath: /NeptuneDreams/FoodOrders/1.0.0